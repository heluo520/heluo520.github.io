import{_ as p}from"./ValaxyMain.vue_vue_type_style_index_0_lang-Dqwu8Jdw.js";import{a as c,p as k,o,c as E,w as l,f as u,r as e,h as i,i as s}from"./app-CcjxAnZT.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-d6j7wb4G.js";import"./YunCard.vue_vue_type_script_setup_true_lang-CImDppQX.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-BQokIkuj.js";import"./index-C7yU5XnD.js";const g=i("h2",{id:"目录",tabindex:"-1"},[s("目录 "),i("a",{class:"header-anchor",href:"#目录","aria-label":'Permalink to "目录"'},"​")],-1),y=i("ul",null,[i("li",null,[i("a",{href:"#%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86"},"基础部分"),i("ul",null,[i("li",null,[i("a",{href:"#oop"},"面向对象(OOP)的特性")]),i("li",null,[i("a",{href:"#%E8%99%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E8%99%9A%E6%8C%87%E9%92%88"},"虚函数与虚指针")]),i("li",null,[i("a",{href:"#%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0"},"纯虚函数")]),i("li",null,[i("a",{href:"#inline"},[s("内联函数"),i("code",null,"inline")])]),i("li",null,[i("a",{href:"#%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0"},"析构函数")]),i("li",null,[i("a",{href:"#%E7%B1%BB%E6%A8%A1%E7%89%88%E5%92%8C%E6%88%90%E5%91%98%E6%A8%A1%E7%89%88"},"类模版和成员模版")]),i("li",null,[i("a",{href:"#new"},"内存分配和管理(malloc、free、new、delete)")]),i("li",null,[i("a",{href:"#copy"},"拷贝构造函数(浅拷贝)")]),i("li",null,[i("a",{href:"#const"},[i("code",null,"const"),s("修饰符")])]),i("li",null,[i("a",{href:"#stc"},[i("code",null,"static"),s("修饰符")])]),i("li",null,[i("a",{href:"#of"},[i("code",null,"override"),s("和"),i("code",null,"final")])]),i("li",null,[i("a",{href:"#this"},[i("code",null,"this"),s("指针")])]),i("li",null,[i("a",{href:"#extern"},[i("code",null,"extern"),s("关键字")])]),i("li",null,[i("a",{href:"#%E5%93%AA%E7%A7%8D%E5%8F%98%E9%87%8F%E4%BC%9A%E6%9C%89%E9%BB%98%E8%AE%A4%E5%80%BC"},"种变量会有默认值？")]),i("li",null,[i("a",{href:"#cast"},[s("类型转换"),i("code",null,"cast")])]),i("li",null,[i("a",{href:"#%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88"},"智能指针")]),i("li",null,[i("a",{href:"#str"},[i("code",null,"struct"),s("与"),i("code",null,"class"),s("的区别")])]),i("li",null,[i("a",{href:"#vir"},"为什么拥有虚函数的父类其析构函数必须为虚析构函数")]),i("li",null,[i("a",{href:"#stack"},"如何定义只能在堆/栈上存在的对象？")]),i("li",null,[i("a",{href:"#%E5%BC%95%E7%94%A8"},"引用")]),i("li",null,[i("a",{href:"#%E6%8C%87%E9%92%88"},"指针")]),i("li",null,[i("a",{href:"#friend"},"友元函数与友元类")]),i("li",null,[i("a",{href:"#lambda"},"Lambda表达式")]),i("li",null,[i("a",{href:"#%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B"},"内存模型")]),i("li",null,[i("a",{href:"#if"},"预处理指令")])])]),i("li",null,[i("a",{href:"#STL"},"STL容器")])],-1),F=i("hr",null,null,-1),_=i("h2",{id:"基础部分",tabindex:"-1"},[s("基础部分 "),i("a",{class:"header-anchor",href:"#基础部分","aria-label":'Permalink to "基础部分"'},"​")],-1),A=i("h2",{id:"面向对象-oop-的特性",tabindex:"-1"},[s("面向对象(OOP)的特性"),i("a",{id:"oop"}),s(),i("a",{class:"header-anchor",href:"#面向对象-oop-的特性","aria-label":'Permalink to "面向对象(OOP)的特性<a id="oop"></a>"'},"​")],-1),f=i("ul",null,[i("li",null,"封装 把客观事务封装成抽象的类且可以控制类中数据的访问权限，拥有属性与方法，类和结构体就是封装的体现。"),i("li",null,"继承 子类继承父类的公有属性和函数。"),i("li",null,"多态 分为静态多态和动态多态，静态多态体现为类中函数的重载，在编译时期完成；动态多态体现为可以用父类的指针或引用指向子类对象，程序运行时会根据子类的实际类型调用其对应的方法。通过虚指针实现，含义虚函数的类会有一张虚表(编译时生成存放虚函数的入口地址，该类的实例化对象共用一张虚表)，并且在实例化的时候会生成一个虚指针(保存虚表的地址)，因此通过这个虚指针父类可以找到子类中的虚函数。")],-1),m=i("h2",{id:"虚函数与虚指针",tabindex:"-1"},[s("虚函数与虚指针 "),i("a",{class:"header-anchor",href:"#虚函数与虚指针","aria-label":'Permalink to "虚函数与虚指针"'},"​")],-1),b=i("ul",null,[i("li",null,"虚函数： 类中使用 virtual 修饰的函数，其实现可以留给子类实现，类似 Java 中的抽象方法但有不同，子类可以不重写父类的虚函数。定义虚函数的作用就是为了让子类可以重写从而使得编译器能够使用动态绑定来达到多态。含有虚函数的类其析构函数必须定义为虚函数，原因见下文。注意：普通函数、静态函数、构造函数(因为虚指针是调用完构造方法后生成的)不能是虚函数。"),i("li",null,"虚指针： 含有虚函数的类在实例化时会生成一个虚指针，该指针指向虚表。")],-1),v=i("p",null,"虚函数不占用类的存储空间，虚指针占用类的存储空间，大小为一个指针的大小。",-1),D=i("h2",{id:"纯虚函数",tabindex:"-1"},[s("纯虚函数 "),i("a",{class:"header-anchor",href:"#纯虚函数","aria-label":'Permalink to "纯虚函数"'},"​")],-1),C=i("p",null,[s("不能提供实现，方法的实现必须需要在子类中完成，含有纯虚函数的类叫做抽象类，不能被实例化，其子类必须实现其纯虚函数才能实例化。这个纯虚函数类似接口。与JAVA中的定义类似。例如："),i("code",null,"virtual int test()=0;")],-1),B=i("h2",{id:"内联函数inline",tabindex:"-1"},[s("内联函数"),i("code",null,"inline"),i("a",{id:"inline"}),s(),i("a",{class:"header-anchor",href:"#内联函数inline","aria-label":'Permalink to "内联函数`inline`<a id="inline"></a>"'},"​")],-1),x=i("p",null,"主要目的是为了减少函数调用的开销。即将定义为内联函数的函数体代码复制到所有调用该函数的地方，有点类似宏定义，但是比宏定义多了类型检查，也是在编译时期执行。省去了参数压栈、栈帧开辟与回收，返回结果生成临时副本等提高了程序运行速度。在类中定义的函数(虚函数除外)都会隐式变成内联函数，但实际会不会执行代码展开还是由编译器决定，一般比较复杂的比如含义循环、递归等复杂的语句的函数编译器不会将其当成内联函数处理(声明了也没用)，也与函数的调用频率有关。一般用于简单的函数。缺点是会导致代码膨胀。",-1),P=i("h2",{id:"析构函数",tabindex:"-1"},[s("析构函数 "),i("a",{class:"header-anchor",href:"#析构函数","aria-label":'Permalink to "析构函数"'},"​")],-1),w=i("p",null,"类中用于正确释放其资源的函数，对象生命周期结束时编译器会自动调用且一个类中只能定义一个析构函数并且不能有参数，不显式声明会有默认的一个。虚析构函数可以是内联函数，但是在表现出多态的时候不可以是内联的，因为编译器需要在编译阶段确定调用的析构函数具体是哪个类的，只有在编译器具有实际的对象而不是对象的指针或引用时才会发生。例如：",-1),T=i("div",{style:{"max-height":"300px"},class:"language-C++ vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"C++"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        int*"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        //构造函数")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int*"),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}}," a_"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"):"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"a"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(a_){}")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        //析构函数")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        ~A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            delete"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            a"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"nullptr"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"};")])])]),i("button",{class:"collapse"})],-1),j=i("h2",{id:"类模版和成员模版",tabindex:"-1"},[s("类模版和成员模版 "),i("a",{class:"header-anchor",href:"#类模版和成员模版","aria-label":'Permalink to "类模版和成员模版"'},"​")],-1),$=i("p",null,"相当于 Java 中的泛型。",-1),S=i("div",{style:{"max-height":"300px"},class:"language-c++ vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"c++"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    template"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," <"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," T"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    T"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," get"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"T"),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}}," i"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        return"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," i;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"};")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"template"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," <"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," T"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," B"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    T i;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    T"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," get"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"T"),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}}," j"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        return"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," i"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"j;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"};")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"template"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," <"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," T"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," C"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    T i;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    template"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," <"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"typename"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," U1"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},","),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"typename"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," U2"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    void"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," print"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"U1"),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}}," j"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},","),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"U2"),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}}," k"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        std"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"::cout"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"j"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"k;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"};")])])]),i("button",{class:"collapse"})],-1),L=i("h2",{id:"内存分配和管理-malloc、free、new、delete",tabindex:"-1"},[s("内存分配和管理(malloc、free、new、delete)"),i("a",{id:"new"}),s(),i("a",{class:"header-anchor",href:"#内存分配和管理-malloc、free、new、delete","aria-label":'Permalink to "内存分配和管理(malloc、free、new、delete)<a id="new"></a>"'},"​")],-1),M=i("p",null,"malloc 与 free 是 c 中的库函数；而 new 与 delete 则是 c++ 中的关键字。",-1),O=i("ul",null,[i("li",null,[i("code",null,"malloc"),s("：申请指定空间字节的内存，内存中的初值不确定，参数为要申请的内存大小，申请成功则返回一个 void* 类型的指针(类型擦除的，所以需要进行强制类型转换)，若申请不成功为 null。使用例："),i("code",null,"int* i = (int*)malloc(sizeof(obj));"),s("( obj 为 int 类型的变量)。")]),i("li",null,[i("code",null,"free"),s(": 释放指定对象的内存。")]),i("li",null,[i("code",null,"new"),s(": 其底层是先调用 malloc 再调用对象的构造函数，其会自动计算要分配内存的大小。")]),i("li",null,[i("code",null,"delete"),s(": 底层是先调用析构函数再调用 free。")])],-1),q=i("h2",{id:"拷贝构造函数-浅拷贝",tabindex:"-1"},[s("拷贝构造函数(浅拷贝)"),i("a",{id:"copy"}),s(),i("a",{class:"header-anchor",href:"#拷贝构造函数-浅拷贝","aria-label":'Permalink to "拷贝构造函数(浅拷贝)<a id="copy"></a>"'},"​")],-1),H=i("p",null,"可用于通过一个已有类实例来初始化一个新的类实例，新类实例的属性值与被拷贝的类一样，个人认为是 C++ 中都是值传递，比如说给一个参数是对象类型的，函数传参的时候首先会先产生一个临时变量 temp (即参数变量)，然后通过拷贝构造函数用实参来初始化这个相同类型的临时变量 temp ，拷贝完后析构掉这样临时变量 temp 。一般会在用类的一个的实例去初始化另一个类的实例、传递类类型的形参(防止悬空指针的出现)、返回类类型的返回值的情况下会使用到拷贝构造函数。没有显式声明则编译器会默认生成一个(不会处理静态成员变量)。含有指针类型的成员变量或动态分配内存的类必须显式声明一个拷贝构造函数。",-1),J=i("div",{style:{"max-height":"300px"},class:"language-c++ vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"c++"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    private:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int"),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}}," a_"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"):"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"a"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(a_){}")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        //跟普通构造函数一样，但是参数为引用，const可加可不加。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"&"),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}}," classA"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            //即用一个类去实例化另一个同类型的类，成员变量都要带上")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            a "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," classA.a;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"};")])])]),i("button",{class:"collapse"})],-1),N=i("h2",{id:"const修饰符",tabindex:"-1"},[i("code",null,"const"),s("修饰符"),i("a",{id:"const"}),s(),i("a",{class:"header-anchor",href:"#const修饰符","aria-label":'Permalink to "`const`修饰符<a id="const"></a>"'},"​")],-1),U=i("p",null,[s("可以修饰变量、指针、引用、成员函数，修饰成员函数时不能与"),i("code",null,"static"),s("一起使用因为没有"),i("code",null,"this"),s("指针。")],-1),V=i("ul",null,[i("li",null,[i("p",null,"修饰变量 表示该变量不能再被重新赋值，即是个常量。")]),i("li",null,[i("p",null,"修饰指针"),i("ol",null,[i("li",null,[i("code",null,"const int* ptr = &a;"),s("表示一个常量指针，即指针指向的是一个常量，指针指向可以改变但改变后必须还是指向一个常量。(可以这么来理解，const右边修饰指针)")]),i("li",null,[i("code",null,"int* const ptr = &a;"),s("表示一个指针常量，即指针的指向不可以发生改变，但指向的对象的内容可以改变。("),i("code",null,"const"),s("右边修饰一个变量)")])])]),i("li",null,[i("p",null,"修饰引用"),i("ul",null,[i("li",null,[i("code",null,"const int& ref = &a;"),s("表示一个常量引用，即这个引用的值不能被修改，引用的是常量。不存在引用常量这种，因为引用的实现是一个指针常量，在初始化之后就不能重新赋值了。")])])]),i("li",null,[i("p",null,"修饰成员函数"),i("ul",null,[i("li",null,[s("表示保证不会在此成员函数中修改成员变量的值(因为"),i("code",null,"this"),s("被修饰为了"),i("code",null,"const className* const this"),s("，即既不能对"),i("code",null,"this"),s("赋值也不能改变"),i("code",null,"this"),s("指向对象的内容)但是该成员变量被"),i("code",null,"mutable"),s("修饰的可以在此中被修改，"),i("code",null,"const"),s(" 修饰的函数会被重载，但是只能被 "),i("code",null,"const"),s(" 修饰的类的实例调用。例如：")])]),i("div",{style:{"max-height":"300px"},class:"language-C++ vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"C++"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        int"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getA"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            return"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        int"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getA"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            return"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"};")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," main"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    A a1;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    const"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," A a2;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    a1."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getA"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//调用的是普通的成员函数")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    a2."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getA"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//调用的是const修饰的函数")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),i("button",{class:"collapse"})])]),i("li",null,[i("p",null,"使用地方"),i("ul",null,[i("li",null,[s("修饰函数的参数："),i("br"),s(" 一般是修饰参数为引用类型的，当我们不想让这个实参被修改时，可以使得在函数内不会误改实参。")]),i("li",null,[s("修饰返回值： "),i("ol",null,[i("li",null,"基本类型的返回值：为常量。"),i("li",null,[s("指针或引用类型的返回值：指向一个常量，其实也就是常引用，只能访问不能修改这个返回值"),i("code",null,"const int& a();"),s("。")])])]),i("li",null,[s("修饰修饰成员函数 表示不能在此成员函数中修改定义该函数类中的成员变量，具体原因就是"),i("code",null,"this"),s("被"),i("code",null,"const"),s("修饰了，详情在目录"),i("a",{href:"#this%E6%8C%87%E9%92%88"},"this指针"),s("。")])])])],-1),Y=i("h2",{id:"static修饰符",tabindex:"-1"},[i("code",null,"static"),s("修饰符"),i("a",{id:"stc"}),s(),i("a",{class:"header-anchor",href:"#static修饰符","aria-label":'Permalink to "`static`修饰符<a id="stc"></a>"'},"​")],-1),z=i("p",null,"可以修饰成员变量、局部变量、全局变量、成员函数、普通函数。",-1),R=i("ul",null,[i("li",null,"修饰局部变量 生命周期为整个程序结束后销毁，存放到全局区，内存中只有一份，编译期间就初始化好了。"),i("li",null,"修饰全局变量 生命周期也是整个程序销毁为止，存储在全局区共享一份，编译器初始化。但是这个全局变量变为只能在声明该变量的文件访问到。"),i("li",null,[s("修饰成员变量 与前两个类似，但是对于类来说的话是属于类的，通过类名访问"),i("code",null,"className::A"),s("且只能在类外初始化。")]),i("li",null,[s("修饰成员函数 也是属于类，通过类名访问，初始化没有要求，在 "),i("code",null,"static"),s(" 函数内不能访问非"),i("code",null,"static"),s("方法。")]),i("li",null,"修饰普通函数 表明该函数只在定义该函数的类中可以使用，可以防止命名冲突。")],-1),G=i("h2",{id:"override和final-当做-java-中的来理解就行",tabindex:"-1"},[i("code",null,"override"),s("和"),i("code",null,"final"),s("(当做 Java 中的来理解就行)"),i("a",{id:"of"}),s(),i("a",{class:"header-anchor",href:"#override和final-当做-java-中的来理解就行","aria-label":'Permalink to "`override`和`final`(当做 Java 中的来理解就行)<a id="of"></a>"'},"​")],-1),I=i("p",null,"一般是为了增强虚函数的安全性。下面为加在类的成员函数后面的意义。",-1),K=i("ul",null,[i("li",null,[i("code",null,"override"),s("是让编译器去检查我们在子类中覆写父类的方法时是否覆写正确。"),i("br"),s(" 最佳实践是只在父类中虚函数上添加"),i("code",null,"virtual"),s("而在子类中意图重写父类方法的地方都加上"),i("code",null,"override"),s("而不必关心是否需要加"),i("code",null,"virtual"),s("(因为加了前者编译器就会帮我们检查)，只有好处没有坏处。")]),i("li",null,[i("code",null,"final"),s(" 是为了防止父类中的方法被子类重写。"),i("br"),s(" 最佳实践是在父类中不想被子类重写的虚函数加上此关键字。")])],-1),Q=i("p",null,[i("code",null,"final"),s("还可以加在类上表示这个类不可以被继承。")],-1),W=i("h2",{id:"this指针",tabindex:"-1"},[i("code",null,"this"),s("指针"),i("a",{id:"this"}),s(),i("a",{class:"header-anchor",href:"#this指针","aria-label":'Permalink to "`this`指针<a id="this"></a>"'},"​")],-1),X=i("p",null,[s("是非静态成员函数中的隐含参数其指向调用函数的那个对象(其实就是自引用)，编译器会在这个函数被调用时将这个调用者的地址赋值给这个 "),i("code",null,"this"),s(" 指针。 "),i("code",null,"this"),s(" 会隐式使用。被 "),i("code",null,"const"),s(" 修饰的成员函数中 "),i("code",null,"this"),s(" 被修饰为 "),i("code",null,"const className* const this"),s("，即"),i("code",null,"this"),s("是一个右值，不能对其进行取址操作。")],-1),Z=i("h2",{id:"extern关键字",tabindex:"-1"},[i("code",null,"extern"),s("关键字"),i("a",{id:"extern"}),s(),i("a",{class:"header-anchor",href:"#extern关键字","aria-label":'Permalink to "`extern`关键字<a id="extern"></a>"'},"​")],-1),ii=i("p",null,[s("用于将变量或函数的作用域延伸到本文件或其他模块，使用了"),i("code",null,"static"),s("标识的不行。例如： 头文件")],-1),si=i("div",{style:{"max-height":"300px"},class:"language-c++ vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"c++"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//myhead.h 只在头文件中声明，为了防止重复定义")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"#ifndef"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "MYHEAD_H"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},'#define "MYHEAD_H" ')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"extern"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"extern"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," int"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," test"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//extern可以省略，因为函数的声明与定义是可区别的")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"#endif")])])]),i("button",{class:"collapse"})],-1),li=i("p",null,"源文件",-1),ai=i("div",{style:{"max-height":"300px"},class:"language-c++ vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"c++"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//model1.cpp 在此处进行定义")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"#include"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "myhead.h"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 100"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," test"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    std"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"::cout"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<<"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"你好，我是吗喽。"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),i("button",{class:"collapse"})],-1),ei=i("p",null,"其他源文件",-1),ni=i("div",{style:{"max-height":"300px"},class:"language-c++ vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"c++"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//model2.cpp 在此处需要使用则用extern进行引入")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"extern"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"extern"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," test;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," main"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    test"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    std"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"::cout"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"a;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),i("button",{class:"collapse"})],-1),ti=i("p",null,[i("code",null,'extern "C"'),s("就是让其表示的语句是通过类 C 编译与链接规约来进行编译与链接的，可以实现 C 与 C++ 的混合编程(目的为此)。")],-1),hi=i("h2",{id:"哪种变量会有默认值",tabindex:"-1"},[s("哪种变量会有默认值 "),i("a",{class:"header-anchor",href:"#哪种变量会有默认值","aria-label":'Permalink to "哪种变量会有默认值"'},"​")],-1),ki=i("p",null,"全局变量、全局静态变量、局部静态变量。由编译器在编译阶段执行赋值操作。",-1),di=i("h2",{id:"类型转换cast",tabindex:"-1"},[s("类型转换"),i("code",null,"CAST"),i("a",{id:"cast"}),s(),i("a",{class:"header-anchor",href:"#类型转换cast","aria-label":'Permalink to "类型转换`CAST`<a id="cast"></a>"'},"​")],-1),ri=i("ul",null,[i("li",null,"静态类型转换： 用于类型相似的对象之间的转换，如 int 转换为 float，不会在运行时进行型检查。"),i("li",null,"动态类型转换： 一般是基类的指针或引用转换为派生类的指针或引用，会在运行时进行类型查"),i("li",null,[s("常量转换： 用于将"),i("code",null,"const"),s("类型对象转换为非"),i("code",null,"const"),s("类型的对象，只能用于转换掉"),i("code",null,"const"),s("属性不能改变对象的类型，前提是被转换的对象原本是非常量。")]),i("li",null,"重新解释转换： 将一个数据类型解释为另一个数据类型的值。")],-1),pi=i("h2",{id:"智能指针",tabindex:"-1"},[s("智能指针 "),i("a",{class:"header-anchor",href:"#智能指针","aria-label":'Permalink to "智能指针"'},"​")],-1),ci=i("p",null,"原理: 智能指针是一个类，用来存储指向动态分配内存的对象的指针，负责自动释放动态分配内存的对象，防止内存泄露。动态分配的资源交给一个类对象去管理，当智能指针类对象声明周期结束时自动调用析构函数释放资源。个人理解就是通过使用这种类型的指针去代替使用一般类型的裸指针，利用其自动管理的机制来防止内存泄露。",-1),oi=i("ul",null,[i("li",null,[i("code",null,"std::unique_ptr<T>"),s("类型： 独占资源所有权的指针即只允许一个智能指针托管指向该资源(对象)的指针，是互斥性的，不支持普通拷贝和赋值操作，只能移动所有权，不能用在STL标准容器中。")]),i("li",null,[i("code",null,"std::shared_ptr<T>"),s("类型： 共享资源所有权的指针，通过引用计数器管理。多个智能指针可以指向相同对象，该对象和其相关资源会在最后一个引用被销毁时被释放，由最后一个智能指针执行。")]),i("li",null,[i("code",null,"std::weak_ptr<T>"),s(" 类型： 共享资源的观察者，需要和"),i("code",null,"std::shared_ptr"),s("一起使用，不影响资源的生命周期，创建不会使得关联资源的引用计数器+1，析构不会使得引用计数器-1，是弱引用，可以与"),i("code",null,"shared_ptr"),s("相互赋值。通过配合"),i("code",null,"shared_ptr<T>"),s("使用可以解决循环引用问题造成的内存泄露。")])],-1),Ei=i("p",null,"循环引用的解决：",-1),ui=i("div",{style:{"max-height":"300px"},class:"language-c++ vp-adaptive-theme line-numbers-mode"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"c++"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"#include"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," <iostream>")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"#include"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," <memory>")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public:")]),s(`
`),i("span",{class:"line highlighted"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        shared_ptr"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"B"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," b;"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//5")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"};")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," B"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public:")]),s(`
`),i("span",{class:"line highlighted"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        //shared_ptr<A> a;//9")]),s(`
`),i("span",{class:"line highlighted"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        weak_ptr"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"A"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a;"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//10")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"};")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," main{")]),s(`
`),i("span",{class:"line highlighted"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    shared_ptr"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"A"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," pa"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"new"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," A);"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//13")]),s(`
`),i("span",{class:"line highlighted"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    shared_ptr"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"B"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," pb"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"new"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," B);")]),s(`
`),i("span",{class:"line highlighted"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    pa.b "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," pb;"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//15")]),s(`
`),i("span",{class:"line highlighted"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    pb.a "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," pa;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),i("button",{class:"collapse"}),i("div",{class:"line-numbers-wrapper","aria-hidden":"true"},[i("span",{class:"line-number"},"1"),i("br"),i("span",{class:"line-number"},"2"),i("br"),i("span",{class:"line-number"},"3"),i("br"),i("span",{class:"line-number"},"4"),i("br"),i("span",{class:"line-number"},"5"),i("br"),i("span",{class:"line-number"},"6"),i("br"),i("span",{class:"line-number"},"7"),i("br"),i("span",{class:"line-number"},"8"),i("br"),i("span",{class:"line-number"},"9"),i("br"),i("span",{class:"line-number"},"10"),i("br"),i("span",{class:"line-number"},"11"),i("br"),i("span",{class:"line-number"},"12"),i("br"),i("span",{class:"line-number"},"13"),i("br"),i("span",{class:"line-number"},"14"),i("br"),i("span",{class:"line-number"},"15"),i("br"),i("span",{class:"line-number"},"16"),i("br"),i("span",{class:"line-number"},"17"),i("br")])],-1),gi=i("p",null,"在上面的场景中类A中有成员变量会引用类B而类B中也会有成员变量引用A。",-1),yi=i("p",null,[s("如果类B中成员变量是"),i("code",null,"shared_ptr<A> a;"),s("的情况的话，那么 main 函数中13处会使得 pa 中的引用计数器"),i("code",null,"pa.use_Count"),s("的值为1(资源的创建)，在14行处"),i("code",null,"pb.use_Count==1"),s("，15行处"),i("code",null,"pb.use_Count==2"),s("，16行处"),i("code",null,"pa.use_Count==2"),s("；程序结束 pa、pb被销毁，"),i("code",null,"pa.use_Count"),s("与"),i("code",null,"pb.use_Count"),s("都变为1，但是只有当这个引用计数器为0时，最后一个引用了资源的智能指针"),i("code",null,"shared_ptr"),s("才会去帮我们释放其引用的资源，所以导致A、B并不能被正确释放。")],-1),Fi=i("p",null,[s("如果类B中成员变量是"),i("code",null,"weak_ptr<A> a;"),s("的话，那么到16行后程序未结束前，"),i("code",null,"pa.use_Count==1"),s("，"),i("code",null,"pb.use_Count==2"),s("(因为"),i("code",null,"weak_ptr<T>"),s("引用相同的资源不会引起引用计数器加1)，程序结束后都分别减1，此时"),i("code",null,"pa.use_Count==0"),s("、"),i("code",null,"pb.use_Count==1"),s("，会将A释放，而A释放后其中的成员变量"),i("code",null,"shared_ptr<B> b;"),s("调用其析构函数就没了，从而会导致"),i("code",null,"pb.use_Count==0"),s("，B被正确释放。循环引用解决。通过观察其构造函数、拷贝构造函数、析构函数以及重载的运算符我们可以很清晰的了解其引用计数的变化情况。详见文章"),i("a",{href:"https://blog.csdn.net/worldwindjp/article/details/18843087",target:"_blank",rel:"noreferrer"},"智能指针的实现")],-1),_i=i("h2",{id:"struct与class的区别",tabindex:"-1"},[i("code",null,"struct"),s("与"),i("code",null,"class"),s("的区别"),i("a",{id:"str"}),s(),i("a",{class:"header-anchor",href:"#struct与class的区别","aria-label":'Permalink to "`struct`与`class`的区别<a id="str"></a>"'},"​")],-1),Ai=i("p",null,[i("code",null,"struct"),s("可以看做是数据结构的实现体，而"),i("code",null,"class"),s("是对象的实现体，最本质的区别是默认的访问控制。默认的继承访问权限："),i("code",null,"struct"),s("是 "),i("code",null,"public"),s("、"),i("code",null,"class"),s("是"),i("code",null,"private"),s("的。默认的数据访问权限(成员变量访问权限)："),i("code",null,"struct"),s("是"),i("code",null,"public"),s("、"),i("code",null,"class"),s("是"),i("code",null,"private"),s("的。")],-1),fi=i("h2",{id:"为什么拥有虚函数的父类其析构函数必须为虚析构函数",tabindex:"-1"},[s("为什么拥有虚函数的父类其析构函数必须为虚析构函数？"),i("a",{id:"vir"}),s(),i("a",{class:"header-anchor",href:"#为什么拥有虚函数的父类其析构函数必须为虚析构函数","aria-label":'Permalink to "为什么拥有虚函数的父类其析构函数必须为虚析构函数？<a id="vir"></a>"'},"​")],-1),mi=i("p",null,[s("答：因为在一个父类指针指向子类对象的时候(展现多态性时)，当其析构函数不为虚函数时，使用"),i("code",null,"delete"),s("释放指针所指对象的内存资源的时候不会触发"),i("strong",null,"动态绑定"),s("，也就是说只会调用父类当中的析构函数从而会导致子类中的资源无法被释放造成"),i("strong",null,"内存泄露"),s("。如果在父类当中将析构函数定义为虚析构函数的话就会触发动态绑定，父类的虚指针就可以找到其子类当中的析构函数并先调用子类的析构函数，在子类的析构函数中会嵌套调用父类的析构函数，这样资源才能被正确释放。虚析构函数的作用也就为了能用一个父类的指针来删除其指向的派生类对象。")],-1),bi=i("h2",{id:"如何定义只能在堆-栈上存在的对象",tabindex:"-1"},[s("如何定义只能在堆/栈上存在的对象？"),i("a",{id:"stack"}),s(),i("a",{class:"header-anchor",href:"#如何定义只能在堆-栈上存在的对象","aria-label":'Permalink to "如何定义只能在堆/栈上存在的对象？<a id="stack"></a>"'},"​")],-1),vi=i("ul",null,[i("li",null,"只能在栈上： 将类的 new 与 delete 重载为 private 修饰的，这样就无法在堆上开辟内存。"),i("li",null,"只能在堆上: 将类的析构函数设置为 private 的，因为编译器为类对象分配栈空间时会先检查对象的析构函数是否可用。")],-1),Di=i("h2",{id:"引用",tabindex:"-1"},[s("引用 "),i("a",{class:"header-anchor",href:"#引用","aria-label":'Permalink to "引用"'},"​")],-1),Ci=i("p",null,[s("看做是变量的别名，与绑定的变量共享相同的内存地址。将参数设置为引用类型可以防止实参被修改，还能省去对象的拷贝所带来的开销。 本质：在C++内部实现是一个指针常量。例如："),i("code",null,"int* const ref = &a;"),s("，也说明了引用为什么被初始化之后就不能对其赋值了。")],-1),Bi=i("h2",{id:"指针",tabindex:"-1"},[s("指针 "),i("a",{class:"header-anchor",href:"#指针","aria-label":'Permalink to "指针"'},"​")],-1),xi=i("p",null,[s("指针也是一种数据结构，在32操作系统中大小为4字节64位操作系统中为8字节(可利用"),i("code",null,"sizeof()"),s("函数求得)。可以通过指针间接访问内存，指针存放的是地址，通过 "),i("code",null,"*"),s(" 解引用操作符可以操作指针指向的内存。")],-1),Pi=i("p",null,[s("空指针：指向内存空间编号为0的空间(内存空间从0开始编号，一般用十六进制数表示)。"),i("br"),s(" 野指针：指针变量指向未知/非法的内存空间。"),i("br"),s(" 空指针和野指针都不是我们申请的空间，不要访问。")],-1),wi=i("h2",{id:"友元函数与友元类-友元修饰函数则是友元函数-修饰类则是友元类",tabindex:"-1"},[s("友元函数与友元类(友元修饰函数则是友元函数，修饰类则是友元类)"),i("a",{id:"friend"}),s(),i("a",{class:"header-anchor",href:"#友元函数与友元类-友元修饰函数则是友元函数-修饰类则是友元类","aria-label":'Permalink to "友元函数与友元类(友元修饰函数则是友元函数，修饰类则是友元类)<a id="friend"></a>"'},"​")],-1),Ti=i("ul",null,[i("li",null,"友元关系是单向的，且不可被传递、继承。"),i("li",null,[s("友元函数是在类中通过"),i("code",null,"friend"),s("声明，类外定义，其不是任何类的成员函数(参数中没有this)，可以在友元函数中访问该类中的"),i("code",null,"private"),s("、"),i("code",null,"protected"),s("成员变量。当要访问非 static 变量时需要传入该类对象作参数，访问 static 变量时则不需要传入对象作为参数。")]),i("li",null,[s("友元类也是通过"),i("code",null,"friend"),s("在类中声明，不是任何类的成员变量，这个类的所有成员函数都是另一个类的友元函数。")])],-1),ji=i("div",{style:{"max-height":"300px"},class:"language-c++ vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"c++"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"#include"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"<iostream>")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"using"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," namespace"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," std"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    private:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        static"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," b;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        friend"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," void"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," f1"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class&"),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}}," c"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        friend"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," B"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"};")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"void"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," f1"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class&"),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}}," c"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    cout"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"c.a"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"::b"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"endl;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," B"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        void"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," f2"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class&"),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}}," c"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            //通过对象访问了他的成员变量，通过类名访问了其的static变量")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            cout"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"c.a"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"::b"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"endl;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"};")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," main"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    A a;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    B b;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    f1"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(a);")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    b."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"f2"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(a);")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),i("button",{class:"collapse"})],-1),$i=i("p",null,"优点：提高了程序的运行效率，最大限度的保证了类中数据成员的安全。 缺点：破坏了类的封装性。",-1),Si=i("h2",{id:"lambda表达式",tabindex:"-1"},[s("Lambda表达式"),i("a",{id:"lambda"}),s(),i("a",{class:"header-anchor",href:"#lambda表达式","aria-label":'Permalink to "Lambda表达式<a id="lambda"></a>"'},"​")],-1),Li=i("p",null,"一般用于匿名函数，结合STL的算法使用",-1),Mi=i("p",null,[i("code",null,"[捕获列表](参数)->返回值类型{语句};"),s("捕获列表可以捕获非静态成员函数中的"),i("code",null,"this")],-1),Oi=i("p",null,[s("写法："),i("code",null,"[]{}"),s(";、"),i("code",null,"[](int a){};"),s("、"),i("code",null,"[](int a)->int{return a};")],-1),qi=i("h2",{id:"内存模型",tabindex:"-1"},[s("内存模型 "),i("a",{class:"header-anchor",href:"#内存模型","aria-label":'Permalink to "内存模型"'},"​")],-1),Hi=i("p",null,"有代码区、全局区、堆区、栈区，编译后未执行exe之前只有代码区和全局区。",-1),Ji=i("ul",null,[i("li",null,"代码区 存放函数体的二进制代码(CPU执行的指令)，由操作系统管理,是共享只读的。"),i("li",null,"全局区 全局区里面包含常量区。存放全局变量、静态变量、全局常量(静态常量在栈区)、字符串常量，程序结束后由操作系统释放相应数据内存。"),i("li",null,"栈区 存放函数的参数、局部变量等，由编译器自动分配释放。"),i("li",null,[s("堆区 存放"),i("code",null,"new"),s("出来(动态分配内存)的对象，由程序员分配释放，程序结束后操作系统会回收未被释放的空间。")])],-1),Ni=i("p",null,[s("栈里面的内存由编译器管理，存放方法的局部变量、参数等。堆里面是存放动态开辟内存的对象，即使用"),i("code",null,"new"),s("实例化的对象，由程序员手动申请与释放。")],-1),Ui=i("h2",{id:"预处理指令-ifndef-if-not-define-、-endif-结束标志-、ifdef-if-define-、-else-分支",tabindex:"-1"},[s("预处理指令"),i("code",null,"#ifndef"),s("(if not define)、"),i("code",null,"#endif"),s("(结束标志)、"),i("code",null,"ifdef"),s("(if define)、"),i("code",null,"#else"),s("(分支)"),i("a",{id:"if"}),s(),i("a",{class:"header-anchor",href:"#预处理指令-ifndef-if-not-define-、-endif-结束标志-、ifdef-if-define-、-else-分支","aria-label":'Permalink to "预处理指令`#ifndef`(if not define)、`#endif`(结束标志)、`ifdef`(if define)、`#else`(分支)<a id="if"></a>"'},"​")],-1),Vi=i("p",null,"预处理指令，用于条件编译，可以根据是否定义了某个宏来决定是否编译某段代码，一般在头文件中使用，可以防止重定义错误。即在多个.cpp文件中重复引用了该头文件导致多次编译头文件中的内容。",-1),Yi=i("div",{style:{"max-height":"300px"},class:"language-C++ vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"C++"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//myhead.h")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"#ifndef"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," _MYHEAD_")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"#define"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," _MYHEAD_")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"};")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"#endif")])])]),i("button",{class:"collapse"})],-1),zi=i("h2",{id:"stl容器",tabindex:"-1"},[s("STL容器"),i("a",{id:"STL"}),s(),i("a",{class:"header-anchor",href:"#stl容器","aria-label":'Permalink to "STL容器<a id="STL"></a>"'},"​")],-1),Ri=i("p",null,"分为：",-1),Gi=i("ul",null,[i("li",null,[s("序列式容器(元素可序但未必有序，允许双向遍历) "),i("ul",null,[i("li",null,"vector(动态数组)"),i("li",null,"deque(双端队列)"),i("li",null,"list(双向链表)")])]),i("li",null,"无序容器。"),i("li",null,[s("关联式容器(存储键值对，通过键来组织元素) "),i("ul",null,[i("li",null,"set(不允许重复元素，只有键)"),i("li",null,"multiset(多重集合，允许多个元素具有相同的键)"),i("li",null,"map(映射，一个键映射一个值)"),i("li",null,"multimap(多重映射，允许多个键映射到相同的值)")])])],-1),Ii=i("h2",{id:"array",tabindex:"-1"},[s("array "),i("a",{class:"header-anchor",href:"#array","aria-label":'Permalink to "array"'},"​")],-1),Ki=i("p",null,"固定大小的顺序容器。",-1),Qi=i("h2",{id:"vector",tabindex:"-1"},[s("vector "),i("a",{class:"header-anchor",href:"#vector","aria-label":'Permalink to "vector"'},"​")],-1),Wi=i("p",null,[s("可变大小的数组序列容器。"),i("br"),s(" 自动扩容原理：申请空间、拷贝元素、释放空间。windows下是1.5倍，linux下是2倍。太大会浪费空间，太小会频繁扩容，2倍不能利用前面释放的内存空间而1.5倍经过多次扩容后可以利用前面释放的内存空间。")],-1),Xi=i("h2",{id:"deque",tabindex:"-1"},[s("deque "),i("a",{class:"header-anchor",href:"#deque","aria-label":'Permalink to "deque"'},"​")],-1),Zi=i("p",null,"双端队列，是一个具有动态大小的序列容器，可以在两端扩展或收缩。",-1),is=i("h2",{id:"forward-list",tabindex:"-1"},[s("forward_list "),i("a",{class:"header-anchor",href:"#forward-list","aria-label":'Permalink to "forward_list"'},"​")],-1),ss=i("p",null,"单向链表，是序列容器。",-1),ls=i("h2",{id:"list",tabindex:"-1"},[s("list "),i("a",{class:"header-anchor",href:"#list","aria-label":'Permalink to "list"'},"​")],-1),as=i("p",null,"双向链表，是序列容器。",-1),es=i("h2",{id:"set",tabindex:"-1"},[s("set "),i("a",{class:"header-anchor",href:"#set","aria-label":'Permalink to "set"'},"​")],-1),ns=i("p",null,"红黑树实现，按照特定顺序存储唯一元素的容器，是一种特殊的map只有键没有值。",-1),ts=i("h2",{id:"unordered-set",tabindex:"-1"},[s("unordered_set "),i("a",{class:"header-anchor",href:"#unordered-set","aria-label":'Permalink to "unordered_set"'},"​")],-1),hs=i("p",null,"通过哈希表计算元素位置，类似unordered_map，只有键没有值。",-1),ks=i("h2",{id:"map-类似java中的treemap",tabindex:"-1"},[s("map (类似java中的TreeMap) "),i("a",{class:"header-anchor",href:"#map-类似java中的treemap","aria-label":'Permalink to "map (类似java中的TreeMap)"'},"​")],-1),ds=i("ul",null,[i("li",null,"关联容器，按照一定顺序存储由key和value组合成的元素。"),i("li",null,"由红黑树实现，使用于有序数据的场景")],-1),rs=i("h2",{id:"unordered-map-类似java中的hashmap",tabindex:"-1"},[s("unordered_map (类似java中的HashMap) "),i("a",{class:"header-anchor",href:"#unordered-map-类似java中的hashmap","aria-label":'Permalink to "unordered_map (类似java中的HashMap)"'},"​")],-1),ps=i("ul",null,[i("li",null,"与map类似，但由哈希表实现(无序)，查找效率高适用于需要高效查找的场景。")],-1),fs={__name:"c-plus",setup(cs,{expose:d}){const n=JSON.parse('{"title":"C++","description":"","frontmatter":{"title":"C++","date":"2024-5-8","categories":"C++","tags":["C++"],"top":1},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"基础部分","slug":"基础部分","link":"#基础部分","children":[]},{"level":2,"title":"面向对象(OOP)的特性","slug":"面向对象-oop-的特性","link":"#面向对象-oop-的特性","children":[]},{"level":2,"title":"虚函数与虚指针","slug":"虚函数与虚指针","link":"#虚函数与虚指针","children":[]},{"level":2,"title":"纯虚函数","slug":"纯虚函数","link":"#纯虚函数","children":[]},{"level":2,"title":"内联函数inline","slug":"内联函数inline","link":"#内联函数inline","children":[]},{"level":2,"title":"析构函数","slug":"析构函数","link":"#析构函数","children":[]},{"level":2,"title":"类模版和成员模版","slug":"类模版和成员模版","link":"#类模版和成员模版","children":[]},{"level":2,"title":"内存分配和管理(malloc、free、new、delete)","slug":"内存分配和管理-malloc、free、new、delete","link":"#内存分配和管理-malloc、free、new、delete","children":[]},{"level":2,"title":"拷贝构造函数(浅拷贝)","slug":"拷贝构造函数-浅拷贝","link":"#拷贝构造函数-浅拷贝","children":[]},{"level":2,"title":"const修饰符","slug":"const修饰符","link":"#const修饰符","children":[]},{"level":2,"title":"static修饰符","slug":"static修饰符","link":"#static修饰符","children":[]},{"level":2,"title":"override和final(当做 Java 中的来理解就行)","slug":"override和final-当做-java-中的来理解就行","link":"#override和final-当做-java-中的来理解就行","children":[]},{"level":2,"title":"this指针","slug":"this指针","link":"#this指针","children":[]},{"level":2,"title":"extern关键字","slug":"extern关键字","link":"#extern关键字","children":[]},{"level":2,"title":"哪种变量会有默认值","slug":"哪种变量会有默认值","link":"#哪种变量会有默认值","children":[]},{"level":2,"title":"类型转换CAST","slug":"类型转换cast","link":"#类型转换cast","children":[]},{"level":2,"title":"智能指针","slug":"智能指针","link":"#智能指针","children":[]},{"level":2,"title":"struct与class的区别","slug":"struct与class的区别","link":"#struct与class的区别","children":[]},{"level":2,"title":"为什么拥有虚函数的父类其析构函数必须为虚析构函数？","slug":"为什么拥有虚函数的父类其析构函数必须为虚析构函数","link":"#为什么拥有虚函数的父类其析构函数必须为虚析构函数","children":[]},{"level":2,"title":"如何定义只能在堆/栈上存在的对象？","slug":"如何定义只能在堆-栈上存在的对象","link":"#如何定义只能在堆-栈上存在的对象","children":[]},{"level":2,"title":"引用","slug":"引用","link":"#引用","children":[]},{"level":2,"title":"指针","slug":"指针","link":"#指针","children":[]},{"level":2,"title":"友元函数与友元类(友元修饰函数则是友元函数，修饰类则是友元类)","slug":"友元函数与友元类-友元修饰函数则是友元函数-修饰类则是友元类","link":"#友元函数与友元类-友元修饰函数则是友元函数-修饰类则是友元类","children":[]},{"level":2,"title":"Lambda表达式","slug":"lambda表达式","link":"#lambda表达式","children":[]},{"level":2,"title":"内存模型","slug":"内存模型","link":"#内存模型","children":[]},{"level":2,"title":"预处理指令#ifndef(if not define)、#endif(结束标志)、ifdef(if define)、#else(分支)","slug":"预处理指令-ifndef-if-not-define-、-endif-结束标志-、ifdef-if-define-、-else-分支","link":"#预处理指令-ifndef-if-not-define-、-endif-结束标志-、ifdef-if-define-、-else-分支","children":[]},{"level":2,"title":"STL容器","slug":"stl容器","link":"#stl容器","children":[]},{"level":2,"title":"array","slug":"array","link":"#array","children":[]},{"level":2,"title":"vector","slug":"vector","link":"#vector","children":[]},{"level":2,"title":"deque","slug":"deque","link":"#deque","children":[]},{"level":2,"title":"forward_list","slug":"forward-list","link":"#forward-list","children":[]},{"level":2,"title":"list","slug":"list","link":"#list","children":[]},{"level":2,"title":"set","slug":"set","link":"#set","children":[]},{"level":2,"title":"unordered_set","slug":"unordered-set","link":"#unordered-set","children":[]},{"level":2,"title":"map (类似java中的TreeMap)","slug":"map-类似java中的treemap","link":"#map-类似java中的treemap","children":[]},{"level":2,"title":"unordered_map (类似java中的HashMap)","slug":"unordered-map-类似java中的hashmap","link":"#unordered-map-类似java中的hashmap","children":[]}],"relativePath":"pages/posts/notes/c-plus.md","path":"/home/runner/work/blog-code/blog-code/pages/posts/notes/c-plus.md","lastUpdated":1722335859000}'),h=c(),t=n.frontmatter||{};return h.meta.frontmatter=Object.assign(h.meta.frontmatter||{},n.frontmatter||{}),k("pageData",n),k("valaxy:frontmatter",t),globalThis.$frontmatter=t,d({frontmatter:{title:"C++",date:"2024-5-8",categories:"C++",tags:["C++"],top:1}}),(a,Es)=>{const r=p;return o(),E(r,{frontmatter:u(t)},{"main-content-md":l(()=>[g,y,F,_,A,f,m,b,v,D,C,B,x,P,w,T,j,$,S,L,M,O,q,H,J,N,U,V,Y,z,R,G,I,K,Q,W,X,Z,ii,si,li,ai,ei,ni,ti,hi,ki,di,ri,pi,ci,oi,Ei,ui,gi,yi,Fi,_i,Ai,fi,mi,bi,vi,Di,Ci,Bi,xi,Pi,wi,Ti,ji,$i,Si,Li,Mi,Oi,qi,Hi,Ji,Ni,Ui,Vi,Yi,zi,Ri,Gi,Ii,Ki,Qi,Wi,Xi,Zi,is,ss,ls,as,es,ns,ts,hs,ks,ds,rs,ps]),"main-header":l(()=>[e(a.$slots,"main-header")]),"main-header-after":l(()=>[e(a.$slots,"main-header-after")]),"main-nav":l(()=>[e(a.$slots,"main-nav")]),"main-content":l(()=>[e(a.$slots,"main-content")]),"main-content-after":l(()=>[e(a.$slots,"main-content-after")]),"main-nav-before":l(()=>[e(a.$slots,"main-nav-before")]),"main-nav-after":l(()=>[e(a.$slots,"main-nav-after")]),comment:l(()=>[e(a.$slots,"comment")]),footer:l(()=>[e(a.$slots,"footer")]),aside:l(()=>[e(a.$slots,"aside")]),"aside-custom":l(()=>[e(a.$slots,"aside-custom")]),default:l(()=>[e(a.$slots,"default")]),_:3},8,["frontmatter"])}}};export{fs as default};
