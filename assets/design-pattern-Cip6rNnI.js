import{_ as d}from"./ValaxyMain.vue_vue_type_style_index_0_lang-DLT6_yVV.js";import{a as p,p as r,o as c,c as E,w as a,f as g,r as e,h as i,i as s}from"./app-CEMXsY7Q.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-DQNCLLVP.js";import"./YunCard.vue_vue_type_script_setup_true_lang-Db_VZTVx.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-B99RlB6C.js";import"./index-C7yU5XnD.js";const m=i("ul",null,[i("li")],-1),y=i("h2",{id:"什么是设计模式",tabindex:"-1"},[s("什么是设计模式？ "),i("a",{class:"header-anchor",href:"#什么是设计模式","aria-label":'Permalink to "什么是设计模式？"'},"​")],-1),u=i("p",null,"设计模式是软件设计中常见问题的典型解决方案。(感觉都是为了使得设计的程序可扩展性好，不易出错，灵活高效)",-1),f=i("h1",{id:"根据意图-目的来分类",tabindex:"-1"},[s("根据意图/目的来分类 "),i("a",{class:"header-anchor",href:"#根据意图-目的来分类","aria-label":'Permalink to "根据意图/目的来分类"'},"​")],-1),b=i("h2",{id:"创建型模式",tabindex:"-1"},[s("创建型模式 "),i("a",{class:"header-anchor",href:"#创建型模式","aria-label":'Permalink to "创建型模式"'},"​")],-1),F=i("p",null,"提供创建对象的机制，增加已有代码的灵活性和可复用性。(个人理解：创建对象的形式)",-1),_=i("ul",null,[i("li",null,[s("工厂方法模式 定义一个用于创建对象的接口，让子类决定实例化哪一个类。使一个类 提供一种创建对象的方式而不需要指定要创建的具体类。创建过程延迟到子类进行"),i("br"),s(" 实现：在工厂类的工厂方法中返回一个接口类型，工厂方法的具体实现由其子类去定义，在子类中返回的类型需实现这个公共接口。也就是说让子类决定工厂方法的具体返回类型，客户端调用工厂方法并不知道其实现细节。扩展时只需要新增一个工厂的子类并重写其工厂方法即可。"),i("br"),s(" 应用场景：不同条件下创建不同的实例时。")]),i("li",null,"单例模式 让一个类只有一个实例并提供一个访问该实例的方法。 实现：")],-1),A=i("div",{style:{"max-height":"300px"},class:"language-java vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"java"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"public"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," final"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," static"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," A a;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," String b;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    private"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(String "),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"b"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"){"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".b"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"b;}")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," static"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," A "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"newAInstance"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(String "),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"b"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        if"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(a "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," null"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"){")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            a "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," A"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(b);")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        return"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),i("button",{class:"collapse"})],-1),v=i("h2",{id:"结构型模式",tabindex:"-1"},[s("结构型模式 "),i("a",{class:"header-anchor",href:"#结构型模式","aria-label":'Permalink to "结构型模式"'},"​")],-1),D=i("p",null,"介绍如何将对象和类组装成较大的结构，并同时保持结构的灵活和高效。(组织业务结构的形式)",-1),$=i("h2",{id:"行为型模式",tabindex:"-1"},[s("行为型模式 "),i("a",{class:"header-anchor",href:"#行为型模式","aria-label":'Permalink to "行为型模式"'},"​")],-1),B=i("p",null,"负责对象间的高效沟通和责任委派。(模块之间的通信，信息传递)",-1),C=i("ul",null,[i("li",null,"观察者模式(发布者-订阅者模式) 当发布者中被订阅者订阅的状态改变时，所有订阅了该状态的订阅者都会收到来自发布者的通知并自动更新。定义了一种一对多的关系。主要解决一个对象状态改变给其他对象通知的问题。")],-1),I={__name:"design-pattern",setup(P,{expose:k}){const l=JSON.parse('{"title":"设计模式","description":"","frontmatter":{"title":"设计模式","date":"2024-5-9","categories":"笔记"},"headers":[{"level":2,"title":"什么是设计模式？","slug":"什么是设计模式","link":"#什么是设计模式","children":[]},{"level":2,"title":"创建型模式","slug":"创建型模式","link":"#创建型模式","children":[]},{"level":2,"title":"结构型模式","slug":"结构型模式","link":"#结构型模式","children":[]},{"level":2,"title":"行为型模式","slug":"行为型模式","link":"#行为型模式","children":[]}],"relativePath":"pages/posts/notes/design-pattern.md","path":"/home/runner/work/blog-code/blog-code/pages/posts/notes/design-pattern.md","lastUpdated":1717229652000}'),h=p(),n=l.frontmatter||{};return h.meta.frontmatter=Object.assign(h.meta.frontmatter||{},l.frontmatter||{}),r("pageData",l),r("valaxy:frontmatter",n),globalThis.$frontmatter=n,k({frontmatter:{title:"设计模式",date:"2024-5-9",categories:"笔记"}}),(t,S)=>{const o=d;return c(),E(o,{frontmatter:g(n)},{"main-content-md":a(()=>[m,y,u,f,b,F,_,A,v,D,$,B,C]),"main-header":a(()=>[e(t.$slots,"main-header")]),"main-header-after":a(()=>[e(t.$slots,"main-header-after")]),"main-nav":a(()=>[e(t.$slots,"main-nav")]),"main-content":a(()=>[e(t.$slots,"main-content")]),"main-content-after":a(()=>[e(t.$slots,"main-content-after")]),"main-nav-before":a(()=>[e(t.$slots,"main-nav-before")]),"main-nav-after":a(()=>[e(t.$slots,"main-nav-after")]),comment:a(()=>[e(t.$slots,"comment")]),footer:a(()=>[e(t.$slots,"footer")]),aside:a(()=>[e(t.$slots,"aside")]),"aside-custom":a(()=>[e(t.$slots,"aside-custom")]),default:a(()=>[e(t.$slots,"default")]),_:3},8,["frontmatter"])}}};export{I as default};
