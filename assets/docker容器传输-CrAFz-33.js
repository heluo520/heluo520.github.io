import{_ as d}from"./ValaxyMain.vue_vue_type_style_index_0_lang-B9K2Oimw.js";import{a as p,p as c,o as u,c as k,w as t,f,g as h,r as n,h as e,i as r}from"./app-CEsek8-U.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-DTpMhzHz.js";import"./YunCard.vue_vue_type_script_setup_true_lang-CzKeoQea.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-tFfsDj90.js";import"./index-C7yU5XnD.js";const y=e("p",null,"在使用Docker部署多个项目的时候，我们可能会想要只对外暴露一个端口来访问我们服务器上的服务，那么我们就可以使用Nginx服务器来进行反向代理，而容器之间通过配置是可以进行相互访问通信的(不需要给每个服务都配置公网ip，在内网中通信)。",-1),g=e("h2",{id:"docker容器间的相互访问",tabindex:"-1"},[r("docker容器间的相互访问 "),e("a",{class:"header-anchor",href:"#docker容器间的相互访问","aria-label":'Permalink to "docker容器间的相互访问"'},"​")],-1),$=e("p",null,"有三种方式：通过创建容器时分配的ip、通过link、自定义bridge网络。前两种不怎么好用。",-1),b=e("ol",null,[e("li",null,[e("p",null,"通过ip访问"),e("p",null,[r("使用命令"),e("code",null,"docker inspect mycentos7"),r("来查看分配给容器 mycentos7 的ip地址。")])]),e("li",null,[e("p",null,"通过link连接(静态的不好用)")]),e("li",null,[e("p",null,"通过自定义bridge网络"),e("ul",null,[e("li",null,[e("p",null,"创建bridge网络"),e("p",null,[e("code",null,"docker network create mynet"),r("创建名为 mynet 的网络")])]),e("li",null,[e("p",null,"在创建容器时指定参数将容器添加到自定义网络中并指定别名"),e("p",null,[e("code",null,"docker run -di --name=mycentos7 --network=mynet --network-alias=centos7 centos:7"),r("此命令会将容器 mycentos7 加入自定义网络 mynet 中并给容器指定别名 centos7 ，这样在同一个自定义网络 mynet 中的其他容器就可以直接通过"),e("code",null,"ping centos7"),r("来访问容器 mycentos7 而不用通过ip来访问，可以使得当容器ip发生改变时也可以通过该别名访问容器，相比于 link 方式是动态的。")])]),e("li",null,[e("p",null,"查看自定义的bridge网络"),e("p",null,[e("code",null,"docker network ls"),r("列出系统中的全部网络。 "),e("code",null,"docker network inspect mynet"),r("查看名为 mynet 的自定义网络信息。")])]),e("li",null,[e("p",null,"删除指定的自定义网络"),e("p",null,[r("要删除自定义网络需要先断开绑定到这个网络中的容器，使用命令"),e("code",null,"docker network disconnect mynet mycentos7"),r("断开自定义 mynet 网络与容器mycentos7之间的连接。删除自定义网络"),e("code",null,"docker network rm mynet"),r("删除了自定义网络 mynet。")])])])])],-1),P={__name:"docker容器传输",setup(v,{expose:i}){const l=JSON.parse('{"title":"Docker容器间的相互访问","description":"","frontmatter":{"title":"Docker容器间的相互访问","date":"2024-6-5","categories":"Docker","tags":["docker","容器化"]},"headers":[{"level":2,"title":"docker容器间的相互访问","slug":"docker容器间的相互访问","link":"#docker容器间的相互访问","children":[]}],"relativePath":"pages/posts/docker/docker容器传输.md","path":"/home/runner/work/blog-code/blog-code/pages/posts/docker/docker容器传输.md","lastUpdated":1721282064000}'),s=p(),a=l.frontmatter||{};return s.meta.frontmatter=Object.assign(s.meta.frontmatter||{},l.frontmatter||{}),c("pageData",l),c("valaxy:frontmatter",a),globalThis.$frontmatter=a,i({frontmatter:{title:"Docker容器间的相互访问",date:"2024-6-5",categories:"Docker",tags:["docker","容器化"]}}),(o,_)=>{const m=d;return u(),k(m,{frontmatter:f(a)},{"main-content-md":t(()=>[y,h("more"),g,$,b]),"main-header":t(()=>[n(o.$slots,"main-header")]),"main-header-after":t(()=>[n(o.$slots,"main-header-after")]),"main-nav":t(()=>[n(o.$slots,"main-nav")]),"main-content":t(()=>[n(o.$slots,"main-content")]),"main-content-after":t(()=>[n(o.$slots,"main-content-after")]),"main-nav-before":t(()=>[n(o.$slots,"main-nav-before")]),"main-nav-after":t(()=>[n(o.$slots,"main-nav-after")]),comment:t(()=>[n(o.$slots,"comment")]),footer:t(()=>[n(o.$slots,"footer")]),aside:t(()=>[n(o.$slots,"aside")]),"aside-custom":t(()=>[n(o.$slots,"aside-custom")]),default:t(()=>[n(o.$slots,"default")]),_:3},8,["frontmatter"])}}};export{P as default};
