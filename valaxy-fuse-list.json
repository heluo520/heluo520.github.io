[{"title":"springboot在一个子模块B中引用另一个子模块C后编译B出错","tags":["build","debug"],"categories":"DeBug","author":"贤狼赫萝","excerpt":"debug记录\n\n","link":"/posts/debug/bulid-bug"},{"title":"使用@Slf4j打印对象出现java.lang.StackOverflowError","tags":["debug"],"categories":"DeBug","author":"贤狼赫萝","excerpt":"使用@Slf4j打印对象时出现`java.lang.ClassNotFoundException: org.springframework.core.log.LogDelegateFactory`异常","link":"/posts/debug/slfj"},{"title":"springboot整合mybatis与mybatis-plus","tags":["mybatis","mybatis-plus"],"categories":"框架","author":"贤狼赫萝","excerpt":"mybatis-plus是在mybatis的基础上只做增强而不做改变。所以我们可以同时使用两者，即有plus的方便性又有mybatis的灵活性。\n\n","link":"/posts/frame/mybatis-plus"},{"title":"在linux下安装配置wordpress","tags":["linux","wordpress"],"categories":"other","author":"贤狼赫萝","excerpt":"## 在linux中wordpress的安装\n\n### 步骤一：更新系统\n在终端中输入并执行命令：`sudo apt update && sudo apt upgrade`\n### 步骤二：安装apa","link":"/posts/linux/wordpress"},{"title":"常用算法","tags":["算法"],"categories":"笔记","author":"贤狼赫萝","excerpt":"## 目录\n- [排序算法](#排序算法)\n    1. [快速排序](#快速排序)\n    2. [归并排序](#归并排序)\n    3. [堆排序](#堆排序)\n\n\n## 排序算法\n#### 快速","link":"/posts/notes/algorithm"},{"title":"C++","tags":["C++"],"categories":"C++","author":"贤狼赫萝","excerpt":"## 目录\n- [基础部分](#基础部分)\n    - [面向对象(OOP)的特性](#oop)\n    - [虚函数与虚指针](#虚函数与虚指针)\n    - [纯虚函数](#纯虚函数)\n    -","link":"/posts/notes/c-plus"},{"title":"设计模式","tags":[],"categories":"笔记","author":"贤狼赫萝","excerpt":"-\n\n## 什么是设计模式？\n设计模式是软件设计中常见问题的典型解决方案。(感觉都是为了使得设计的程序可扩展性好，不易出错，灵活高效)\n\n# 根据意图/目的来分类\n## 创建型模式\n提供创建对象的机制","link":"/posts/notes/design-pattern"},{"title":"SpringBoot中的注解","tags":["注解","springboot"],"categories":"springboot","author":"贤狼赫萝","excerpt":"\n## 注解@ConfigurationProperties\n- 简介：可用于读取yml文件中定义的元数据并生成属性对象，一般用于生成配置对象。\n- 用法：\n\n  配置对象\n  ```java\n  @","link":"/posts/springboot/annotation"},{"title":"web项目中的文件上传与下载","tags":["文件上传下载","springboot"],"categories":"springboot","author":"贤狼赫萝","excerpt":"\n## 设置上传文件最大大小设置\n```yml\n# application.yml\nspring:\n  servlet:\n    multipart:\n      max-file-size: 10M","link":"/posts/springboot/fileutils"},{"title":"jwt的使用","tags":["jwt"],"categories":"springboot","author":"贤狼赫萝","excerpt":"\nJWT（JSON Web Token）是一种开放标准（RFC 7519），它定义了一种紧凑且自包含的方式，用于在各方之间安全地传输信息作为 JSON 对象。JWT 可以通过数字签名进行验证，这样就可以确保在传输过程中的数据不被篡改。\n\n","link":"/posts/springboot/jwt"},{"title":"springboot源码学习","tags":["springboot","源码"],"categories":[],"author":"贤狼赫萝","excerpt":"笔记\n","link":"/posts/springboot/source-code"},{"title":"springboot+mybatis中resultMap与驼峰命名","tags":[],"categories":"springboot","author":"贤狼赫萝","excerpt":"当数据库中表的字段名与我们java实体中的属性名不同时我们就需要手动指定映射关系，或进行一些配置。\n","link":"/posts/springboot/springboot-mybatis"},{"title":"SpringBoot中通过第三方Swagger-UI来使用Swagger","tags":["dependencies"],"categories":"springboot","author":"贤狼赫萝","excerpt":"> 前言：在前后端分离开发的过程中，前端和后端需要进行api对接进行交互，就需要一个api规范文档，方便前后端的交互，但api文档不能根据代码的变化发生实时动态的改变，这样后端修改了接口，前端不能及时获取最新的接口，导致调用出错，需要手动维护api文档，加大了开发的工作量和困难，而swagger的出现就是为了解决这一系列的问题。\n\n简单来说的话就是一个基于openAPI构建的可用于动态生成后端接口文档的工具集\n","link":"/posts/springboot/swagger"},{"title":"SpringBoot中的Interceptor(拦截器)与Filter(过滤器)","tags":["springboot","java"],"categories":"springboot","author":"贤狼赫萝","excerpt":"\n## 二者对比(其实作用都差不多)\n\n|  | **Interceptor** | **Filter** |\n| :---: | :---: | :---: |\n| **技术范畴** | Sprin","link":"/posts/springboot/%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8"},{"title":"Spring中的AOP","tags":["ssm","java"],"categories":"ssm","author":"贤狼赫萝","excerpt":"\n> 使用前提：Spring的AOP是基于JDK动态代理和CGlib代理实现的，所以目标对象必须要有父类或实现了接口才能被代理。\n\n","link":"/posts/ssm/index"},{"title":"如何在Spring项目中使用Junit4?","tags":["Junit4","spring"],"categories":"ssm","author":"贤狼赫萝","excerpt":"spring其实已经帮我们提供了整合Junit4的依赖，我们只需要导入Junit4的依赖就行。\n\n","link":"/posts/ssm/spring-junit"},{"title":"测试","tags":["test"],"categories":"测试","author":"贤狼赫萝","excerpt":"\n# 没毛病兄弟们\n\n内容....\n![漂亮的小姐姐](./img/jk.jpg)","link":"/posts/ssm/test"}]
