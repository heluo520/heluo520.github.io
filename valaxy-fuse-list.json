[{"title":"MySQL学习笔记","tags":["db"],"categories":"database","author":"贤狼赫萝","excerpt":"\n## NULL值的处理\n- 使用函数`COALESCE(arg1,arg2,agr3,...)`。其接收多个参数，返回其中不为 null 的值，全为 null则返回 null。\n- 使用`IFNUL","link":"/posts/db/mysql"},{"title":"Redis学习笔记","tags":["db"],"categories":"database","author":"贤狼赫萝","excerpt":"\n## Redis启动(Windows下)\n在 Redis 的安装目录下进入终端，输入`redis-server.exe redis.windows.conf`启动 Redis 服务端，另起一个终端进","link":"/posts/db/redis"},{"title":"springboot在一个子模块B中引用另一个子模块C后编译B出错","tags":["build","debug"],"categories":"DeBug","author":"贤狼赫萝","excerpt":"debug记录\n\n","link":"/posts/debug/bulid-bug"},{"title":"使用@Slf4j打印对象出现java.lang.StackOverflowError","tags":["debug"],"categories":"DeBug","author":"贤狼赫萝","excerpt":"使用@Slf4j打印对象时出现`java.lang.ClassNotFoundException: org.springframework.core.log.LogDelegateFactory`异常","link":"/posts/debug/slfj"},{"title":"DNS","tags":[],"categories":"notes","author":"贤狼赫萝","excerpt":"\n## linux下记录DNS解析的文件\n该文件的路径为`/etc/hosts`，使用`cat /etc/hosts`查看该文件内容如下：\n```sh\n127.0.0.1\tlocalhost\n127.","link":"/posts/docker/dns"},{"title":"Docker学习记录","tags":["docker"],"categories":"Docker","author":"贤狼赫萝","excerpt":"\n本文内容包括在虚拟机上安装Docker以及在阿里云ECS上安装Docker\n","link":"/posts/docker/docker"},{"title":"Docker容器间的相互访问","tags":["docker","容器化"],"categories":"Docker","author":"贤狼赫萝","excerpt":"\n在使用Docker部署多个项目的时候，我们可能会想要只对外暴露一个端口来访问我们服务器上的服务，那么我们就可以使用Nginx服务器来进行反向代理，而容器之间通过配置是可以进行相互访问通信的(不需要给","link":"/posts/docker/docker%E5%AE%B9%E5%99%A8%E4%BC%A0%E8%BE%93"},{"title":"springboot整合mybatis与mybatis-plus","tags":["mybatis","mybatis-plus"],"categories":"框架","author":"贤狼赫萝","excerpt":"mybatis-plus是在mybatis的基础上只做增强而不做改变。所以我们可以同时使用两者，即有plus的方便性又有mybatis的灵活性。\n\n","link":"/posts/frame/mybatis-plus"},{"title":"linux指令学习","tags":["linux"],"categories":"linux","author":"贤狼赫萝","excerpt":"## 前言\n基于Ubuntu的linux发行版\n## 组成\n- 内核\n- shell(用户与内核交互的接口)\n- 文件系统\n\n## vim\n| 命令 | 作用 |\n| :---: | :---: |\n","link":"/posts/linux/linux"},{"title":"在linux下安装配置wordpress","tags":["linux","wordpress"],"categories":"other","author":"贤狼赫萝","excerpt":"## 在linux中wordpress的安装\n\n### 步骤一：更新系统\n在终端中输入并执行命令：`sudo apt update && sudo apt upgrade`\n### 步骤二：安装apa","link":"/posts/linux/wordpress"},{"title":"Netty简单使用","tags":["Netty"],"categories":"Netty","author":"贤狼赫萝","excerpt":"\n使用Netty框架构建一个简单的服务端与客户端程序进行通信\n","link":"/posts/notes/Netty%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8"},{"title":"Java与Spring中的SPI机制","tags":["SPI"],"categories":"SPI","author":"贤狼赫萝","excerpt":"\n## Java当中提供的SPI\n>在目录`resource/META-INF/services`下以接口全限定名作为文件名，文件内容为其实现类，一个文件对应一个接口。\n\n文件名为Animals接口的","link":"/posts/notes/SPI"},{"title":"常用算法","tags":["算法"],"categories":"笔记","author":"贤狼赫萝","excerpt":"## 目录\n- [排序算法](#排序算法)\n    1. [快速排序](#快速排序)\n    2. [归并排序](#归并排序)\n    3. [堆排序](#堆排序)\n\n\n## 排序算法\n#### 快速","link":"/posts/notes/algorithm"},{"title":"C++","tags":["C++"],"categories":"C++","author":"贤狼赫萝","excerpt":"## 目录\n- [基础部分](#基础部分)\n    - [面向对象(OOP)的特性](#oop)\n    - [虚函数与虚指针](#虚函数与虚指针)\n    - [纯虚函数](#纯虚函数)\n    -","link":"/posts/notes/c-plus"},{"title":"设计模式","tags":[],"categories":"笔记","author":"贤狼赫萝","excerpt":"-\n\n## 什么是设计模式？\n设计模式是软件设计中常见问题的典型解决方案。(感觉都是为了使得设计的程序可扩展性好，不易出错，灵活高效)\n\n# 根据意图/目的来分类\n## 创建型模式\n提供创建对象的机制","link":"/posts/notes/design-pattern"},{"title":"上传图片至七牛云","tags":["七牛云对象存储"],"categories":"其它","author":"贤狼赫萝","excerpt":"\n\n使用的方式为服务端上传\n","link":"/posts/notes/%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E8%87%B3%E4%B8%83%E7%89%9B%E4%BA%91"},{"title":"多线程设计模式之两阶段终止模式","tags":["设计模式"],"categories":"多线程","author":"贤狼赫萝","excerpt":"\n## 两阶段终止含义\n> 即分为两个阶段来终止线程，让线程自然的结束`run`方法。第一个阶段是线程`t1`向需要终止的`t2`线程发送终止请求，第二个阶段是`t2`线程响应中断请求，即自然的结束`","link":"/posts/notes/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F"},{"title":"通过自定义注解向Spring容器中注入个性化Bean","tags":["spring","IOC"],"categories":"spring","author":"贤狼赫萝","excerpt":"\n本文主要介绍如何通过 Spring 提供的扩展点实现通过一个注解就能向 Spring 容器中注入一个实例化好的 Bean。\n","link":"/posts/springboot/SpringBoot%E6%B3%A8%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89Bean"},{"title":"SpringBoot中的注解","tags":["注解","springboot"],"categories":"springboot","author":"贤狼赫萝","excerpt":"\n## 注解@ConfigurationProperties\n- 简介：可用于读取yml文件中定义的元数据并生成属性对象，一般用于生成配置对象。\n- 用法：\n\n  配置对象\n  ```java\n  @","link":"/posts/springboot/annotation"},{"title":"SpringBoot当中使用自定义注解结合AOP做权限校验","tags":[],"categories":"aop","author":"贤狼赫萝","excerpt":"\n## 原理\n利用的aop对访问的放法进行拦截，然后再利用连接点参数获取方法上的注解以及注解元数据来进行权限校验，通过则让方法执行，不通过则抛出异常让全局异常处理进行捕获处理。\n## 导入需要的依赖项","link":"/posts/springboot/aop%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C"},{"title":"Spring中Bean的生命周期及其扩展点","tags":["Spring"],"categories":"Spring","author":"贤狼赫萝","excerpt":"## Sring中Bean的生命周期\n- `bean`信息先会被封装为一个个`BeanDefinition`对象。\n- 将`BeanDefinition`放入一个`BeanDefinitionMap`","link":"/posts/springboot/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F"},{"title":"web项目中的文件上传与下载","tags":["文件上传下载","springboot"],"categories":"springboot","author":"贤狼赫萝","excerpt":"\n## 设置上传文件最大大小设置\n```yml\n# application.yml\nspring:\n  servlet:\n    multipart:\n      max-file-size: 10M","link":"/posts/springboot/fileutils"},{"title":"jwt的使用","tags":["jwt"],"categories":"springboot","author":"贤狼赫萝","excerpt":"\nJWT（JSON Web Token）是一种开放标准（RFC 7519），它定义了一种紧凑且自包含的方式，用于在各方之间安全地传输信息作为 JSON 对象。JWT 可以通过数字签名进行验证，这样就可以确保在传输过程中的数据不被篡改。\n\n","link":"/posts/springboot/jwt"},{"title":"springboot源码学习","tags":["springboot","源码"],"categories":[],"author":"贤狼赫萝","excerpt":"笔记\n","link":"/posts/springboot/source-code"},{"title":"springboot+mybatis中resultMap与驼峰命名","tags":[],"categories":"springboot","author":"贤狼赫萝","excerpt":"当数据库中表的字段名与我们java实体中的属性名不同时我们就需要手动指定映射关系，或进行一些配置。\n","link":"/posts/springboot/springboot-mybatis"},{"title":"SpringBoot中通过第三方Swagger-UI来使用Swagger","tags":["dependencies"],"categories":"springboot","author":"贤狼赫萝","excerpt":"> 前言：在前后端分离开发的过程中，前端和后端需要进行api对接进行交互，就需要一个api规范文档，方便前后端的交互，但api文档不能根据代码的变化发生实时动态的改变，这样后端修改了接口，前端不能及时获取最新的接口，导致调用出错，需要手动维护api文档，加大了开发的工作量和困难，而swagger的出现就是为了解决这一系列的问题。\n\n简单来说的话就是一个基于openAPI构建的可用于动态生成后端接口文档的工具集\n","link":"/posts/springboot/swagger"},{"title":"SpringBoot中的Interceptor(拦截器)与Filter(过滤器)","tags":["springboot","java"],"categories":"springboot","author":"贤狼赫萝","excerpt":"\n## 二者对比(其实作用都差不多)\n\n|  | **Interceptor** | **Filter** |\n| :---: | :---: | :---: |\n| **技术范畴** | Sprin","link":"/posts/springboot/%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8"},{"title":"EnableAsync与Async注解实现共享线程池","tags":["线程"],"categories":"线程","author":"贤狼赫萝","excerpt":"\n\n## SpringBoot中使用@EnableAsync与@Async实现共享线程池\n\n- 首先需要定义一个配置类对`ThreadPoolTaskExecutor`对象进行配置，并交给容器\n> `","link":"/posts/springboot/%E7%BA%BF%E7%A8%8B%E6%B1%A0"},{"title":"RocketMQ","tags":["mq"],"categories":"消息中间件","author":"贤狼赫萝","excerpt":"\n## 简介\nRocketMQ为Alibaba开发的消息队列。优点：实现应用解耦、异步提速(响应速度)、削峰填谷(囤积消息慢慢处理)。缺点：可用性降低(如何保证中间件的可靠)、复杂性提高(耦合了中间件","link":"/posts/springcloud/rocketmq"},{"title":"SpringCloud Alibab篇","tags":["springcloud"],"categories":"springcloud","author":"贤狼赫萝","excerpt":"## CAP概念\nC: 一致性 、A：可用性 、P：分区容错性\n\n## Nacos与启动\nNacos：Eureka + Config + Bus 包含了注册中心、配置中心、动态刷新配置的功能，即是一个","link":"/posts/springcloud/springcloud-alibab"},{"title":"SpringCloud Eureka篇","tags":["SpringCloud","Eureka"],"categories":"springcloud","author":"贤狼赫萝","excerpt":"## 架构\n- 单体架构\n- 垂直架构\n- 分布式架构\n- SOA架构\n- 微服务架构\n## 注册中心\n用于服务注册与服务发现。\n- 实现：\n    1. Eureka (Netflix)\n    2","link":"/posts/springcloud/springcloud-eureka"},{"title":"Spring中的AOP","tags":["ssm","java"],"categories":"ssm","author":"贤狼赫萝","excerpt":"\n> 使用前提：Spring的AOP是基于JDK动态代理和CGlib代理实现的，所以目标对象必须要有父类或实现了接口才能被代理。\n\n","link":"/posts/ssm/index"},{"title":"如何在Spring项目中使用Junit4?","tags":["Junit4","spring"],"categories":"ssm","author":"贤狼赫萝","excerpt":"spring其实已经帮我们提供了整合Junit4的依赖，我们只需要导入Junit4的依赖就行。\n\n","link":"/posts/ssm/spring-junit"},{"title":"测试","tags":["test"],"categories":"测试","author":"贤狼赫萝","excerpt":"\n# 没毛病兄弟们\n\n内容....\n![漂亮的小姐姐](./img/jk.jpg)","link":"/posts/ssm/test"},{"title":"Git命令","tags":["git"],"categories":"开发工具","author":"贤狼赫萝","excerpt":"\n<!--more-->\n\n## Git命令(常用)\n- git init\n\n    初始化git仓库\n- git remote add origin git@github.com:xxx/xxx.g","link":"/posts/tools/git"},{"title":"IDEA快捷键","tags":["idea"],"categories":"开发工具","author":"贤狼赫萝","excerpt":"\n## 快捷键\n| 快捷键 | 功能 |\n| :---: | :---: |\n| ctrl+alt+t | 将选中的代码放入一个语句块中 |\n| ctrl+alt+m | 将选中的代码提取为一个方法 ","link":"/posts/tools/idea"},{"title":"Maven使用","tags":["maven"],"categories":"开发工具","author":"贤狼赫萝","excerpt":"\n## `<optional>`标签\n情景：\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <arti","link":"/posts/tools/maven"},{"title":"windows快捷键","tags":["windows"],"categories":"开发工具","author":"贤狼赫萝","excerpt":"\n## 快捷键\n| 快捷键 | 功能 |\n| :---: | :---: |\n| ctrl+win+d | 创建新的window桌面 |\n| ctrl+win+左右键 | 切换win桌面 |\n| ct","link":"/posts/tools/windows"}]
